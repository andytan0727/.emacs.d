;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(:age (get {0 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}} 1))" "(:name (get {0 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}} 1))" "(:name (get {1 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}} 0))" "(:name (get {0 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}} 0))" "(:name (:0 {0 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}} ))" "(:name (0 {0 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}} ))" "(:name (get {0 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}} 0))" "(:name (get (hash-map {0 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}}) 0))" "(:name (get ({0 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}}) 0))" "(:name (0 ({0 {:name \"andy\" :age 32}, 1 {:name \"aa\" :age 12}})))" "(apply max (range 9999))" "(apply max (vec (ramge 9999)))" "(apply max (ramge 9999))" "(apply max [1 2])" "(max [1 2])" "(max 1 2)" "((my-comp inc *) 2 3)" "(my-comp inc *)" "(int \"1.2\")" "(int '1.2')" "(int 1.2)" "(int (char \"1\"))" "(int [\"1\"])" "(int \"1\")" "(decreaser 10000)" "(decreaser 1000)" "(decreaser 100)" "(decreaser 10)" "(decreaser 2)" "(trampoline factorial 30)" "(trampoline factorial 6)" "(trampoline factorial 10)" "(trampoline factorial 2)" "(decreaser 10000000000)" "(decreaser 100000000)" "(decreaser 100000)" "(decreaser 10000)" "(decreaser 1000)" "(decreaser 10)" "(decreaser 2)" "(trampoline factorial 30)" "(trampoline factorial 20)" "(trampoline factorial 10)" "(trampoline factorial 2)" "(factorial 30)" "(factorial 20)" "(factorial 10)" "(factorial 5)" "(factorial 3)" "(factorial 1)" "(factorial 2)" "(count [])" "(range 1 3)" "(factorial 2)" "(factorial 1)" "(factorial 6)" "(factorial 5)" "(factorial 4)" "(factorial 3)" "(factorial 2)" "(count '(1))" "(range 1 10)" "(range 1 1
                           )" "(range 10)" "(complement 1)" "(my-mul-app 4 5)" "(my-partial 2 3)" "(type [2 3])" "(my-partial 2 3)" "(my-mul-app 4 5)" "(apply max 10000 100000 (vec (range 0 999)))" "(apply max (vec (range 0 999)) 1000 10000)" "(apply max [1000] (vec (range 0 999)))" "(apply max 1000 (vec (range 0 999)))" "(apply max 2 (vec (range 0 999)))" "(apply max 1 (vec (range 0 999)))" "(apply max  (vec (range 0 999)))" "(apply max (vec (range 999 1999)) (vec (range 0 999)))" "(apply max (vec (range 0 999)))" "(vec (range 0 10))" "(range 0 10)" "(max (apply (vec (range 0 999))))" "(max (apply (range 0 999)))" "(into {:a 1 :b 2} {:c :d})" "(into {:a 1 :b 2} [{:c :d}])" "(seq {:a 1 :b 2})" "(identity {:a 1})" "(identity {:a 1 :b 2 :c 3})" "(map identity {:a 1 :b 2 :c 3})" "(map (do (println identity)identity) {:a 1 :b 2 :c 3})" "(take 10 (even-numbers))" "(conj '(2 3) 0)" "(conj 0 '(2 3))" "(take 10 (even-numbers))" "(even-numbers)" "(cons 5 '(1 2 3 4)
                          )" "(cons 5 [1 2 3 4])" "(cons [1 2 3 4] 5)" "(test-args \"hihi\" \"clojure\")" "(test-args \"hihi\")" "(test-args)" "(+ n 2)" "(take 10 (even-numbers 10))" "(take 10 (even-numbers))" "(conj #{1 2 3 4 5} 2)" "(conj 2 #{1 2 3 4 5})" "(cons 2 #{1 2 3 4 5})" "(cons [1 2 3] #{1 2 3 4 5})" "(concat [1 2 3] #{1 2 3 4 5})" "(into [1 2 3] #{1 2 3 4 5})" "(into [1 2 3] '(2 3))" "(into [1 2 3] [2 3])" "(:makes-blood-puns? (get vampire-database 0))" "(or nil nil nil)" "(and true true 1)" "(or nil nil 1)" "(or nil 1)" "(and nil 1)" "(and 0 1)" "(and 1 2)" "(and 1 nil)" "(time (vampire? (get vampire-database 2)))" "(time (vampire? (get vampire-database 3)))" "(time (vampire? vampire-database))" "(time (identify-vampire [0 1 3]))" "(time (identify-vampire [0 1 2 3]))" "(time (identify-vampire 2))" "(time (vampire-related-details 2))" "(time (vampire-related-details 0))" "(get vampire-database 1)" "(get vampire-database 0)" "(0 vampire-database)" "(:makes-blood-puns? vampire-database)" "(type vampire-database)" "(search 20)" "(:age [{:name \"andy\" :age 21}, {:name \"Angel\" :age 10}, {:name \"Neoh\" :age 21}])" "(seq {:name \"andy\" :age 21})" "(seq [{:name \"andy\" :age 21}])" "(reducer)" "(assoc [1 2 3] 3 :a)" "(assoc [1 2 3] 1 :a)" "(assoc {:a 1 :b 2} :c 3)" "(reducer)" "(reduce ())" "(stats [1 2])" "(avg [2 3])" "(type (avg [2 3]))" "(avg [2 3])" "(stats [1 2])" "(stat [1 2])" "(% [2 3])" "(map #(% [1 2 4]) (1 2))" "(second (second {:a 1 :b 2}))" "(second % (seq {:a 1 :b 2}))" "(second (second (seq {:a 1 :b 2})))" "(second (seq {:a 1 :b 2}))" "(map #(concatenate (second %)) {:a \"first\" :b \"second\" :c \"third\"} {:d \"forth\" :e \"fifth\"})" "(map #(concatenate (second %)) {:a \"first\" :b \"second\" :c \"third\"})" "(hit asym-hobbit-body-parts)" "(into [1 2 3] {:a 4})" "(into [1 2 3] {: a 4})" "(into [1 2 3] #{4})" "(into [1 2 3] '(4))" "(into [1 2 3] [4])" "(into {:a 1 :b 2} {:c 3 :b 4})" "(into {:a 1 :b 2} [:a :b])" "(set [{:a 1 :b 2} {:a 1 :b 2 }])" "(set [{:a 1 :b 2} {:a 1 :c 3}])" "(better-symmetrize-body-parts asym-hobbit-body-parts)" "(reduce + (looping 10000000))" "(reduce + (looping 100)
                            )" "(reduce + (looping 100))" "(looping 100)" "(looping 10)" "(looping)" "(looping 10)" "(reduce + (looping 10))" "(conj [] 2)" "(conj [1 2] 2)" "(reduce + (looping 10))" "(reduce #(+ num 10) (looping 10))" "(reduce (+ num 10) (looping 10))" "(looping)" "(incre total)" "(incre 10)" "total" "(total)" "(doc clojure.lang.IReduce)" "(looping)" "(-main)" "(looping)" "(- 1 2)" "(- 2 1)")