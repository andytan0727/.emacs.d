(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
  (add-to-list 'package-archives (cons "melpa" url) t))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)

;; ensure use-package macro is installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-and-compile
  (defvar use-package-verbose t)
  (require 'cl)
  (require 'use-package)
  (require 'bind-key)
  (require 'diminish)
  (setq use-package-always-ensure t))


;; checks and report Emacs config errors
(use-package validate
  :demand t)

;; Keep .emacs.d clean
;; store files in ~/.emacs.d/var or ~/.emacs.d/etc
(use-package no-littering
  :ensure t
  :config
  (require 'recentf)
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory))

;; user configuration
(setq user-full-name "Andy_Tan"
      user-mail-address "andytan0727@gmail.com")

;; default browser
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")

;; remove splash screen
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)

(when window-system
  (blink-cursor-mode 0)                           ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0))                               ; Disable the tooltips

;; set single space by default to indicate when a sentence ends
(setq sentence-end-double-space nil)

;; backup directory
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; delete all backup files that are older than a certain date
(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (fifth (file-attributes file))))
                  week))
      (message "%s" file)
      (delete-file file))))

;; load secrets
;; (load "~/.emacs.d/secrets.el" t)


(setq-default
 ad-redefinition-action 'accept                  ;; Silence warnings for redefinition
 confirm-kill-emacs 'yes-or-no-p                 ;; Confirm before exiting Emacs
 cursor-in-non-selected-windows t                ;; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                     ;; Delete files to trash
 display-time-default-load-average nil           ;; Don't display load average
 display-time-format "%H:%M"                     ;; Format the time string
 fill-column 80                                  ;; Set width for automatic line breaks
 indent-tabs-mode nil                            ;; Stop using tabs to indent
 inhibit-startup-screen t                        ;; Disable start-up screen
 initial-scratch-message ""                      ;; Empty the initial *scratch* buffer
 left-margin-width 1 right-margin-width 1        ;; Add left and right margins
 ns-use-srgb-colorspace nil                      ;; Don't use sRGB colors
 recenter-positions '(5 top bottom)              ;; Set re-centering positions
 scroll-conservatively most-positive-fixnum      ;; Always scroll by one line
 scroll-margin 10                                ;; Add a margin when scrolling vertically
 sentence-end-double-space nil                   ;; End a sentence after a dot and a space
 show-trailing-whitespace nil                    ;; Display trailing whitespaces
 split-height-threshold nil                      ;; Disable vertical window splitting
 split-width-threshold nil                       ;; Disable horizontal window splitting
 tab-width 4                                     ;; Set width for tabs
 uniquify-buffer-name-style 'forward             ;; Uniquify buffer names
 window-combination-resize t                     ;; Resize windows proportionally
 c-basic-offset 4                                ;; tab-space size during CC-mode
 python-indent-offset 4)                         ;; tab-space size for python-mode
(delete-selection-mode)                          ;; Replace region when inserting text
(display-time-mode)                              ;; Enable time in the mode-line
(fringe-mode 0)                                  ;; Hide fringes
(fset 'yes-or-no-p 'y-or-n-p)                    ;; Replace yes/no prompts with y/n
(global-hl-line-mode)                            ;; Hightlight current line
(mouse-avoidance-mode 'banish)                   ;; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)             ;; Enable downcase-region
(put 'upcase-region 'disabled nil)               ;; Enable upcase-region
(xclip-mode 1)                                   ;; Enable copy/paste from clipboard in -nw mode
(show-paren-mode)                                ;; Turn on parenthesis matching mode

(setq ring-bell-function 'ignore)                ;; ignore alarm

(add-hook 'focus-out-hook #'garbage-collect)     ;; Garbage-collection on focus out (makes Emacs snappier)

(require 'key-chord)
(key-chord-mode 1)

;; smooth-scrolling
(add-to-list 'load-path "~/.emacs.d/smooth-scroll-el")
(require 'smooth-scroll)
(smooth-scroll-mode t)

;; load .secret.el
(load "/home/andy/.emacs.d/.secret.el")

;; load keybindings file
(load "/home/andy/.emacs.d/keybindings/keybindings.el")

;; fullscreen during startup
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; load .custom.el file
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

 ;; add themes folder to custom-theme-load-path
(add-to-list 'custom-theme-load-path "/home/andy/.emacs.d/themes")
(load-theme 'wheatgrass-hybrid t)

;; add space seperation between line number and the buffer contents
(add-hook 'prog-mode-hook 'linum-mode)  ;; Show line numbers in prog-mode only
(setq linum-format "%4d ")  ;; %4d means it reserves 4 spaces for displaying numbers

;; load autopair and enable it to be global
(add-to-list 'load-path "/home/andy/.emacs.d/autopair")
(require 'autopair)
(autopair-global-mode)  ;; enable autopair in all buffers

;; create new scratch buffer (mode-specific)
(use-package scratch
  :ensure t
  :bind ("C-c b" . scratch))

;; yasnippet
(require 'yasnippet)
(yas-global-mode 1)

;; auto dim other buffers
(add-hook 'after-init-hook (lambda ()
  (when (fboundp 'auto-dim-other-buffers-mode)
    (auto-dim-other-buffers-mode t))))


;; colorize colors as text with their value
(use-package rainbow-mode
  :init (add-hook 'prog-mode-hook #'rainbow-mode)
  :config (setq-default rainbow-x-colors-major-mode-list '()))

;; show battery life at mode-line
(add-hook 'after-init-hook #'fancy-battery-mode)
(setq fancy-battery-show-percentage t)

;;--------------------------------------------------
;;                                                 |
;;                  helm-mode                      |
;;                                                 |
;;--------------------------------------------------
(require 'helm-config)
(use-package helm
  :defer 1
  :config
  (helm-mode)
  (setq-default
   helm-always-two-windows t
   helm-display-header-line nil)
  (add-hook 'helm-after-persistent-action-hook
            '(lambda () (recenter-top-bottom (car recenter-positions))))
  (add-hook 'helm-after-action-hook
            '(lambda () (recenter-top-bottom (car recenter-positions))))
  (set-face-attribute 'helm-action nil :underline nil)
  (set-face-attribute 'helm-match nil :background nil)
  (set-face-attribute 'helm-source-header nil
                      :box nil
                      :background nil))
;;helm-split-window-default-side 'left


;;--------------------------------------------------
;;                                                 |
;;                   paradox                       |
;;                                                 |
;;--------------------------------------------------
;; Project for modernizing Emacs’ Package Menu
(require 'paradox)
(paradox-enable)

(use-package paradox
  :config
  (setq-default
   paradox-execute-asynchronously t)
  (remove-hook 'paradox--report-buffer-print 'paradox-after-execute-functions))


;;--------------------------------------------------
;;                                                 |
;;                   spaceline                     |
;;                                                 |
;;--------------------------------------------------
;; configure the mode-line
(setq-default
 mode-line-format '("%e" (:eval (spaceline-ml-main)))
 powerline-default-separator 'wave
 powerline-height 20
 spaceline-highlight-face-func 'spaceline-highlight-face-modified  ;; status of the current buffer (modified, unmodified or read-only).
 spaceline-flycheck-bullet "❖ %s"
 spaceline-separator-dir-left '(left . left)
 spaceline-separator-dir-right '(right . right))

;; mode-line theme
(require 'spaceline-config)
(spaceline-emacs-theme)


;;--------------------------------------------------
;;                                                 |
;;                   ido-mode                      |
;;                                                 |
;;--------------------------------------------------
(setq ido-enable-flex-matching t
      ido-everywhere t
      ido-create-new-buffer 'always)  ;; force ido to always create a new buffer if the namedoes not exist
(ido-mode 1)  ;; enable ido-mode globally


;;--------------------------------------------------
;;                                                 |
;;                   flycheck                      |
;;                                                 |
;;--------------------------------------------------
(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)  ;; flycheck activated globally

(setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))



;;--------------------------------------------------
;;                                                 |
;;                company-mode                     |
;;                                                 |
;;--------------------------------------------------
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)

(use-package company
  :defer 1
  :config
  (global-company-mode)
  (setq-default
   company-idle-delay .2
   company-minimum-prefix-length 1
   company-require-match nil
   company-tooltip-align-annotations t))

(use-package company-dabbrev
  :ensure nil
  :after company
  :config (setq-default company-dabbrev-downcase nil))

;; company for js2-mode
(use-package company-tern
  :after company
  :config
  (add-to-list 'company-backends 'company-tern)
  (setq-default
   company-tern-meta-as-single-line t
   company-tern-property-marker " *"))


;;--------------------------------------------------
;;                                                 |
;;                switch-window                    |
;;                                                 |
;;--------------------------------------------------
;; auto-resize window when switch to it
(setq switch-window-auto-resize-window t)
(setq switch-window-default-window-size 0.8)  ;;80% of frame size


;;--------------------------------------------------
;;                                                 |
;;                 golden-ratio                    |
;;                                                 |
;;--------------------------------------------------
;; auto-resize focused window
(require 'golden-ratio)
(golden-ratio-mode 1)

;;;; to prevent golden-ratio activate in certain mode
(setq golden-ratio-exclude-modes '("ediff-mode"
                                   "eshell-mode"))


;;--------------------------------------------------
;;                                                 |
;;                    Python                       |
;;                                                 |
;;--------------------------------------------------
;; triple quoting in python mode
(add-hook 'python-mode-hook
           #'(lambda ()
               (setq autopair-handle-action-fns
                     (list #'autopair-default-handle-action
                           #'autopair-python-triple-quote-action))))


;;--------------------------------------------------
;;                                                 |
;;                     C/C++                       |
;;                                                 |
;;--------------------------------------------------
;; to have '<' and '>' pairing in C-mode
(add-hook 'c-mode-hook
           #'(lambda ()
               (push '(?< . ?>)
                     (cl-getf autopair-extra-pairs :code))))

;; source code completion using clang
;; need to create a .dir.locals.el file in project root with the following contents:
;; ((nil . ((company-clang-arguments . ("-I/home/<user>/project_root/include1/"
;;                                      "-I/home/<user>/project_root/include2/")))))
(setq company-backends (delete 'company-semantic company-backends))
(add-to-list 'company-backends 'company-c-headers)  ;; header completion
(add-hook 'c-mode-hook (lambda () (rainbow-mode 0)))

;;--------------------------------------------------
;;                                                 |
;;                   JavaScript                    |
;;                                                 |
;;--------------------------------------------------
;; major mode for JavaScript editing
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(setq js2-highlight-level 3)  ;; syntax highligting level

;;syntax checking
(require 'flycheck)
(add-hook 'js2-mode-hook
          (lambda () (flycheck-mode t)))

;; disable jshint (use eslint instead)
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

;; include Node.js externs in the master externs list
;; makes eslint does not recognize function like setTimeout as undef-variable or function
(setq js2-include-node-externs t)

;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'js2-mode)

;; Tern for javaScript
;; Tern-autocomplete for js file
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(eval-after-load 'tern
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))

;;  hook it in for shell scripting via node.js
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))


;;--------------------------------------------------
;;                                                 |
;;                  Common Lisp                    |
;;                                                 |
;;--------------------------------------------------
(defun my-ac-common-lisp-mode ()
  (setq ac-sources '(ac-source-filename
                     ac-source-functions
                     ac-source-variables
                     Ac-source-features
                     ac-source-symbols
                     ac-source-slime
                     ac-source-words-in-same-mode-buffers))
  (add-to-list 'ac-modes 'lisp-mode)
  (auto-complete-mode 1))

(add-hook 'lisp-mode-hook 'my-ac-common-lisp-mode)

;; init.el ends here
